{
  long start=System.currentTimeMillis();
  final List<Outlink> outlinks=new ArrayList<Outlink>();
  try {
    final PatternCompiler cp=new Perl5Compiler();
    final Pattern pattern=cp.compile(URL_PATTERN,Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.MULTILINE_MASK);
    final PatternMatcher matcher=new Perl5Matcher();
    final PatternMatcherInput input=new PatternMatcherInput(plainText);
    MatchResult result;
    String url;
    while (matcher.contains(input,pattern)) {
      if (System.currentTimeMillis() - start >= 60000L) {
        if (LOG.isWarnEnabled()) {
          LOG.warn("Time limit exceeded for getOutLinks");
        }
        break;
      }
      result=matcher.getMatch();
      url=result.group(0);
      try {
        outlinks.add(new Outlink(url,anchor));
      }
 catch (      MalformedURLException mue) {
        LOG.warn("Invalid url: '" + url + "', skipping.");
      }
    }
  }
 catch (  Exception ex) {
    if (LOG.isErrorEnabled()) {
      LOG.error("getOutlinks",ex);
    }
  }
  final Outlink[] retval;
  if (outlinks != null && outlinks.size() > 0) {
    retval=outlinks.toArray(new Outlink[0]);
  }
 else {
    retval=new Outlink[0];
  }
  return retval;
}
