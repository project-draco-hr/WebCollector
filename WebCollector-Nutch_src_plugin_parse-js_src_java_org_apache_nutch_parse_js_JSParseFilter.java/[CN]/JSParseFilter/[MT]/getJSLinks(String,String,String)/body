{
  final List<Outlink> outlinks=new ArrayList<Outlink>();
  URL baseURL=null;
  try {
    baseURL=new URL(base);
  }
 catch (  Exception e) {
    if (LOG.isErrorEnabled()) {
      LOG.error("getJSLinks",e);
    }
  }
  try {
    final PatternCompiler cp=new Perl5Compiler();
    final Pattern pattern=cp.compile(STRING_PATTERN,Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.MULTILINE_MASK);
    final Pattern pattern1=cp.compile(URI_PATTERN,Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.MULTILINE_MASK);
    final PatternMatcher matcher=new Perl5Matcher();
    final PatternMatcher matcher1=new Perl5Matcher();
    final PatternMatcherInput input=new PatternMatcherInput(plainText);
    MatchResult result;
    String url;
    while (matcher.contains(input,pattern)) {
      result=matcher.getMatch();
      url=result.group(2);
      PatternMatcherInput input1=new PatternMatcherInput(url);
      if (!matcher1.matches(input1,pattern1)) {
        continue;
      }
      if (url.startsWith("www.")) {
        url="http://" + url;
      }
 else {
        try {
          url=new URL(baseURL,url).toString();
        }
 catch (        MalformedURLException ex) {
          if (LOG.isTraceEnabled()) {
            LOG.trace(" - failed URL parse '" + url + "' and baseURL '"+ baseURL+ "'",ex);
          }
          continue;
        }
      }
      url=url.replaceAll("&amp;","&");
      if (LOG.isTraceEnabled()) {
        LOG.trace(" - outlink from JS: '" + url + "'");
      }
      outlinks.add(new Outlink(url,anchor));
    }
  }
 catch (  Exception ex) {
    if (LOG.isErrorEnabled()) {
      LOG.error("getJSLinks",ex);
    }
  }
  final Outlink[] retval;
  if (outlinks != null && outlinks.size() > 0) {
    retval=(Outlink[])outlinks.toArray(new Outlink[0]);
  }
 else {
    retval=new Outlink[0];
  }
  return retval;
}
