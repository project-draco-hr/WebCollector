{
  LOG.info("SegmentReader: get '" + key + "'");
  ArrayList<Thread> threads=new ArrayList<Thread>();
  if (co)   threads.add(new Thread(){
    public void run(){
      try {
        List<Writable> res=getMapRecords(new Path(segment,Content.DIR_NAME),key);
        results.put("co",res);
      }
 catch (      Exception e) {
        LOG.error("Exception:",e);
      }
    }
  }
);
  if (fe)   threads.add(new Thread(){
    public void run(){
      try {
        List<Writable> res=getMapRecords(new Path(segment,CrawlDatum.FETCH_DIR_NAME),key);
        results.put("fe",res);
      }
 catch (      Exception e) {
        LOG.error("Exception:",e);
      }
    }
  }
);
  if (ge)   threads.add(new Thread(){
    public void run(){
      try {
        List<Writable> res=getSeqRecords(new Path(segment,CrawlDatum.GENERATE_DIR_NAME),key);
        results.put("ge",res);
      }
 catch (      Exception e) {
        LOG.error("Exception:",e);
      }
    }
  }
);
  if (pa)   threads.add(new Thread(){
    public void run(){
      try {
        List<Writable> res=getSeqRecords(new Path(segment,CrawlDatum.PARSE_DIR_NAME),key);
        results.put("pa",res);
      }
 catch (      Exception e) {
        LOG.error("Exception:",e);
      }
    }
  }
);
  if (pd)   threads.add(new Thread(){
    public void run(){
      try {
        List<Writable> res=getMapRecords(new Path(segment,ParseData.DIR_NAME),key);
        results.put("pd",res);
      }
 catch (      Exception e) {
        LOG.error("Exception:",e);
      }
    }
  }
);
  if (pt)   threads.add(new Thread(){
    public void run(){
      try {
        List<Writable> res=getMapRecords(new Path(segment,ParseText.DIR_NAME),key);
        results.put("pt",res);
      }
 catch (      Exception e) {
        LOG.error("Exception:",e);
      }
    }
  }
);
  Iterator<Thread> it=threads.iterator();
  while (it.hasNext())   it.next().start();
  int cnt;
  do {
    cnt=0;
    try {
      Thread.sleep(5000);
    }
 catch (    Exception e) {
    }
    ;
    it=threads.iterator();
    while (it.hasNext()) {
      if (it.next().isAlive())       cnt++;
    }
    if ((cnt > 0) && (LOG.isDebugEnabled())) {
      LOG.debug("(" + cnt + " to retrieve)");
    }
  }
 while (cnt > 0);
  for (int i=0; i < keys.length; i++) {
    List<Writable> res=results.get(keys[i][0]);
    if (res != null && res.size() > 0) {
      for (int k=0; k < res.size(); k++) {
        writer.write(keys[i][1]);
        writer.write(res.get(k) + "\n");
      }
    }
    writer.flush();
  }
}
