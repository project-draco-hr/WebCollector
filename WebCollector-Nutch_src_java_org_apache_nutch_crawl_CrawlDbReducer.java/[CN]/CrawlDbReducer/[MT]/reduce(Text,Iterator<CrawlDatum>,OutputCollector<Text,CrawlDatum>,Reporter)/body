{
  CrawlDatum fetch=new CrawlDatum();
  CrawlDatum old=new CrawlDatum();
  boolean fetchSet=false;
  boolean oldSet=false;
  byte[] signature=null;
  boolean multiple=false;
  linked.clear();
  org.apache.hadoop.io.MapWritable metaFromParse=null;
  while (values.hasNext()) {
    CrawlDatum datum=values.next();
    if (!multiple && values.hasNext())     multiple=true;
    if (CrawlDatum.hasDbStatus(datum)) {
      if (!oldSet) {
        if (multiple) {
          old.set(datum);
        }
 else {
          old=datum;
        }
        oldSet=true;
      }
 else {
        if (old.getFetchTime() < datum.getFetchTime())         old.set(datum);
      }
      continue;
    }
    if (CrawlDatum.hasFetchStatus(datum)) {
      if (!fetchSet) {
        if (multiple) {
          fetch.set(datum);
        }
 else {
          fetch=datum;
        }
        fetchSet=true;
      }
 else {
        if (fetch.getFetchTime() < datum.getFetchTime())         fetch.set(datum);
      }
      continue;
    }
switch (datum.getStatus()) {
case CrawlDatum.STATUS_LINKED:
      CrawlDatum link;
    if (multiple) {
      link=new CrawlDatum();
      link.set(datum);
    }
 else {
      link=datum;
    }
  linked.insert(link);
break;
case CrawlDatum.STATUS_SIGNATURE:
signature=datum.getSignature();
break;
case CrawlDatum.STATUS_PARSE_META:
metaFromParse=datum.getMetaData();
break;
default :
LOG.warn("Unknown status, key: " + key + ", datum: "+ datum);
}
}
int numLinks=linked.size();
List<CrawlDatum> linkList=new ArrayList<CrawlDatum>(numLinks);
for (int i=numLinks - 1; i >= 0; i--) {
linkList.add(linked.pop());
}
if (!oldSet && !additionsAllowed) return;
if (!fetchSet && linkList.size() > 0) {
fetch=linkList.get(0);
fetchSet=true;
}
if (!fetchSet) {
if (oldSet) {
output.collect(key,old);
reporter.getCounter("CrawlDB status",CrawlDatum.getStatusName(old.getStatus())).increment(1);
}
 else {
LOG.warn("Missing fetch and old value, signature=" + signature);
}
return;
}
if (signature == null) signature=fetch.getSignature();
long prevModifiedTime=oldSet ? old.getModifiedTime() : 0L;
long prevFetchTime=oldSet ? old.getFetchTime() : 0L;
result.set(fetch);
if (oldSet) {
if (old.getMetaData().size() > 0) {
result.putAllMetaData(old);
if (fetch.getMetaData().size() > 0) result.putAllMetaData(fetch);
}
if (old.getModifiedTime() > 0 && fetch.getModifiedTime() == 0) {
result.setModifiedTime(old.getModifiedTime());
}
}
switch (fetch.getStatus()) {
case CrawlDatum.STATUS_LINKED:
if (oldSet) {
result.set(old);
}
 else {
result=schedule.initializeSchedule(key,result);
result.setStatus(CrawlDatum.STATUS_DB_UNFETCHED);
try {
scfilters.initialScore(key,result);
}
 catch (ScoringFilterException e) {
if (LOG.isWarnEnabled()) {
LOG.warn("Cannot filter init score for url " + key + ", using default: "+ e.getMessage());
}
result.setScore(0.0f);
}
}
break;
case CrawlDatum.STATUS_FETCH_SUCCESS:
case CrawlDatum.STATUS_FETCH_REDIR_TEMP:
case CrawlDatum.STATUS_FETCH_REDIR_PERM:
case CrawlDatum.STATUS_FETCH_NOTMODIFIED:
int modified=FetchSchedule.STATUS_UNKNOWN;
if (fetch.getStatus() == CrawlDatum.STATUS_FETCH_NOTMODIFIED) {
modified=FetchSchedule.STATUS_NOTMODIFIED;
}
 else if (fetch.getStatus() == CrawlDatum.STATUS_FETCH_SUCCESS) {
if (oldSet && old.getSignature() != null && signature != null) {
if (SignatureComparator._compare(old.getSignature(),signature) != 0) {
modified=FetchSchedule.STATUS_MODIFIED;
}
 else {
modified=FetchSchedule.STATUS_NOTMODIFIED;
}
}
}
result=schedule.setFetchSchedule(key,result,prevFetchTime,prevModifiedTime,fetch.getFetchTime(),fetch.getModifiedTime(),modified);
if (modified == FetchSchedule.STATUS_NOTMODIFIED) {
result.setStatus(CrawlDatum.STATUS_DB_NOTMODIFIED);
result.setModifiedTime(prevModifiedTime);
if (oldSet) result.setSignature(old.getSignature());
}
 else {
switch (fetch.getStatus()) {
case CrawlDatum.STATUS_FETCH_SUCCESS:
result.setStatus(CrawlDatum.STATUS_DB_FETCHED);
break;
case CrawlDatum.STATUS_FETCH_REDIR_PERM:
result.setStatus(CrawlDatum.STATUS_DB_REDIR_PERM);
break;
case CrawlDatum.STATUS_FETCH_REDIR_TEMP:
result.setStatus(CrawlDatum.STATUS_DB_REDIR_TEMP);
break;
default :
LOG.warn("Unexpected status: " + fetch.getStatus() + " resetting to old status.");
if (oldSet) result.setStatus(old.getStatus());
 else result.setStatus(CrawlDatum.STATUS_DB_UNFETCHED);
}
result.setSignature(signature);
}
if (metaFromParse != null) {
for (Entry<Writable,Writable> e : metaFromParse.entrySet()) {
result.getMetaData().put(e.getKey(),e.getValue());
}
}
if (maxInterval < result.getFetchInterval()) result=schedule.forceRefetch(key,result,false);
break;
case CrawlDatum.STATUS_SIGNATURE:
if (LOG.isWarnEnabled()) {
LOG.warn("Lone CrawlDatum.STATUS_SIGNATURE: " + key);
}
return;
case CrawlDatum.STATUS_FETCH_RETRY:
if (oldSet) {
result.setSignature(old.getSignature());
}
result=schedule.setPageRetrySchedule(key,result,prevFetchTime,prevModifiedTime,fetch.getFetchTime());
if (result.getRetriesSinceFetch() < retryMax) {
result.setStatus(CrawlDatum.STATUS_DB_UNFETCHED);
}
 else {
result.setStatus(CrawlDatum.STATUS_DB_GONE);
result=schedule.setPageGoneSchedule(key,result,prevFetchTime,prevModifiedTime,fetch.getFetchTime());
}
break;
case CrawlDatum.STATUS_FETCH_GONE:
if (oldSet) result.setSignature(old.getSignature());
result.setStatus(CrawlDatum.STATUS_DB_GONE);
result=schedule.setPageGoneSchedule(key,result,prevFetchTime,prevModifiedTime,fetch.getFetchTime());
break;
default :
throw new RuntimeException("Unknown status: " + fetch.getStatus() + " "+ key);
}
try {
scfilters.updateDbScore(key,oldSet ? old : null,result,linkList);
}
 catch (Exception e) {
if (LOG.isWarnEnabled()) {
LOG.warn("Couldn't update score, key=" + key + ": "+ e);
}
}
result.getMetaData().remove(Nutch.WRITABLE_GENERATE_TIME_KEY);
output.collect(key,result);
reporter.getCounter("CrawlDB status",CrawlDatum.getStatusName(result.getStatus())).increment(1);
}
