{
  this.url=url;
  GetMethod get=new GetMethod(url.toString());
  get.setFollowRedirects(followRedirects);
  if (datum.getModifiedTime() > 0) {
    get.setRequestHeader("If-Modified-Since",HttpDateFormat.toString(datum.getModifiedTime()));
  }
  HttpMethodParams params=get.getParams();
  if (http.getUseHttp11()) {
    params.setVersion(HttpVersion.HTTP_1_1);
  }
 else {
    params.setVersion(HttpVersion.HTTP_1_0);
  }
  params.makeLenient();
  params.setContentCharset("UTF-8");
  params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
  params.setBooleanParameter(HttpMethodParams.SINGLE_COOKIE_HEADER,true);
  try {
    code=Http.getClient().executeMethod(get);
    Header[] heads=get.getResponseHeaders();
    for (int i=0; i < heads.length; i++) {
      headers.set(heads[i].getName(),heads[i].getValue());
    }
    int contentLength=Integer.MAX_VALUE;
    String contentLengthString=headers.get(Response.CONTENT_LENGTH);
    if (contentLengthString != null) {
      try {
        contentLength=Integer.parseInt(contentLengthString.trim());
      }
 catch (      NumberFormatException ex) {
        throw new HttpException("bad content length: " + contentLengthString);
      }
    }
    if (http.getMaxContent() >= 0 && contentLength > http.getMaxContent()) {
      contentLength=http.getMaxContent();
    }
    InputStream in=get.getResponseBodyAsStream();
    try {
      byte[] buffer=new byte[HttpBase.BUFFER_SIZE];
      int bufferFilled=0;
      int totalRead=0;
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      while ((bufferFilled=in.read(buffer,0,buffer.length)) != -1 && totalRead + bufferFilled <= contentLength) {
        totalRead+=bufferFilled;
        out.write(buffer,0,bufferFilled);
      }
      content=out.toByteArray();
    }
 catch (    Exception e) {
      if (code == 200)       throw new IOException(e.toString());
    }
 finally {
      if (in != null) {
        in.close();
      }
      get.abort();
    }
    StringBuilder fetchTrace=null;
    if (Http.LOG.isTraceEnabled()) {
      fetchTrace=new StringBuilder("url: " + url + "; status code: "+ code+ "; bytes received: "+ content.length);
      if (getHeader(Response.CONTENT_LENGTH) != null)       fetchTrace.append("; Content-Length: " + getHeader(Response.CONTENT_LENGTH));
      if (getHeader(Response.LOCATION) != null)       fetchTrace.append("; Location: " + getHeader(Response.LOCATION));
    }
    if (content != null) {
      String contentEncoding=headers.get(Response.CONTENT_ENCODING);
      if (contentEncoding != null && Http.LOG.isTraceEnabled())       fetchTrace.append("; Content-Encoding: " + contentEncoding);
      if ("gzip".equals(contentEncoding) || "x-gzip".equals(contentEncoding)) {
        content=http.processGzipEncoded(content,url);
        if (Http.LOG.isTraceEnabled())         fetchTrace.append("; extracted to " + content.length + " bytes");
      }
 else       if ("deflate".equals(contentEncoding)) {
        content=http.processDeflateEncoded(content,url);
        if (Http.LOG.isTraceEnabled())         fetchTrace.append("; extracted to " + content.length + " bytes");
      }
    }
    if (Http.LOG.isTraceEnabled()) {
      Http.LOG.trace(fetchTrace.toString());
    }
  }
  finally {
    get.releaseConnection();
  }
}
