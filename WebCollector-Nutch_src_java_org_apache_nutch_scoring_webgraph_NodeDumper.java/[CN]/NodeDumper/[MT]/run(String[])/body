{
  Options options=new Options();
  OptionBuilder.withArgName("help");
  OptionBuilder.withDescription("show this help message");
  Option helpOpts=OptionBuilder.create("help");
  options.addOption(helpOpts);
  OptionBuilder.withArgName("webgraphdb");
  OptionBuilder.hasArg();
  OptionBuilder.withDescription("the web graph database to use");
  Option webGraphDbOpts=OptionBuilder.create("webgraphdb");
  options.addOption(webGraphDbOpts);
  OptionBuilder.withArgName("inlinks");
  OptionBuilder.withDescription("show highest inlinks");
  Option inlinkOpts=OptionBuilder.create("inlinks");
  options.addOption(inlinkOpts);
  OptionBuilder.withArgName("outlinks");
  OptionBuilder.withDescription("show highest outlinks");
  Option outlinkOpts=OptionBuilder.create("outlinks");
  options.addOption(outlinkOpts);
  OptionBuilder.withArgName("scores");
  OptionBuilder.withDescription("show highest scores");
  Option scoreOpts=OptionBuilder.create("scores");
  options.addOption(scoreOpts);
  OptionBuilder.withArgName("topn");
  OptionBuilder.hasOptionalArg();
  OptionBuilder.withDescription("show topN scores");
  Option topNOpts=OptionBuilder.create("topn");
  options.addOption(topNOpts);
  OptionBuilder.withArgName("output");
  OptionBuilder.hasArg();
  OptionBuilder.withDescription("the output directory to use");
  Option outputOpts=OptionBuilder.create("output");
  options.addOption(outputOpts);
  OptionBuilder.withArgName("asEff");
  OptionBuilder.withDescription("Solr ExternalFileField compatible output format");
  Option effOpts=OptionBuilder.create("asEff");
  options.addOption(effOpts);
  OptionBuilder.hasArgs(2);
  OptionBuilder.withDescription("group <host|domain> <sum|max>");
  Option groupOpts=OptionBuilder.create("group");
  options.addOption(groupOpts);
  OptionBuilder.withArgName("asSequenceFile");
  OptionBuilder.withDescription("whether to output as a sequencefile");
  Option sequenceFileOpts=OptionBuilder.create("asSequenceFile");
  options.addOption(sequenceFileOpts);
  CommandLineParser parser=new GnuParser();
  try {
    CommandLine line=parser.parse(options,args);
    if (line.hasOption("help") || !line.hasOption("webgraphdb")) {
      HelpFormatter formatter=new HelpFormatter();
      formatter.printHelp("NodeDumper",options);
      return -1;
    }
    String webGraphDb=line.getOptionValue("webgraphdb");
    boolean inlinks=line.hasOption("inlinks");
    boolean outlinks=line.hasOption("outlinks");
    long topN=(line.hasOption("topn") ? Long.parseLong(line.getOptionValue("topn")) : Long.MAX_VALUE);
    String output=line.getOptionValue("output");
    DumpType type=(inlinks ? DumpType.INLINKS : outlinks ? DumpType.OUTLINKS : DumpType.SCORES);
    NameType nameType=null;
    AggrType aggrType=null;
    String[] group=line.getOptionValues("group");
    if (group != null && group.length == 2) {
      nameType=(group[0].equals("host") ? NameType.HOST : group[0].equals("domain") ? NameType.DOMAIN : null);
      aggrType=(group[1].equals("sum") ? AggrType.SUM : group[1].equals("sum") ? AggrType.MAX : null);
    }
    boolean asEff=line.hasOption("asEff");
    boolean asSequenceFile=line.hasOption("asSequenceFile");
    dumpNodes(new Path(webGraphDb),type,topN,new Path(output),asEff,nameType,aggrType,asSequenceFile);
    return 0;
  }
 catch (  Exception e) {
    LOG.error("NodeDumper: " + StringUtils.stringifyException(e));
    return -2;
  }
}
