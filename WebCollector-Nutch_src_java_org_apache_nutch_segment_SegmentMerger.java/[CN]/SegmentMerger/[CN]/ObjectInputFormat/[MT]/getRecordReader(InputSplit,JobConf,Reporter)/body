{
  reporter.setStatus(split.toString());
  SegmentPart segmentPart;
  final String spString;
  final FileSplit fSplit=(FileSplit)split;
  try {
    segmentPart=SegmentPart.get(fSplit);
    spString=segmentPart.toString();
  }
 catch (  IOException e) {
    throw new RuntimeException("Cannot identify segment:",e);
  }
  SequenceFile.Reader reader=new SequenceFile.Reader(FileSystem.get(job),fSplit.getPath(),job);
  final Writable w;
  try {
    w=(Writable)reader.getValueClass().newInstance();
  }
 catch (  Exception e) {
    throw new IOException(e.toString());
  }
 finally {
    try {
      reader.close();
    }
 catch (    Exception e) {
    }
  }
  final SequenceFileRecordReader<Text,Writable> splitReader=new SequenceFileRecordReader<Text,Writable>(job,(FileSplit)split);
  try {
    return new SequenceFileRecordReader<Text,MetaWrapper>(job,fSplit){
      public synchronized boolean next(      Text key,      MetaWrapper wrapper) throws IOException {
        LOG.debug("Running OIF.next()");
        boolean res=splitReader.next(key,w);
        wrapper.set(w);
        wrapper.setMeta(SEGMENT_PART_KEY,spString);
        return res;
      }
      @Override public synchronized void close() throws IOException {
        splitReader.close();
      }
      @Override public MetaWrapper createValue(){
        return new MetaWrapper();
      }
    }
;
  }
 catch (  IOException e) {
    throw new RuntimeException("Cannot create RecordReader: ",e);
  }
}
