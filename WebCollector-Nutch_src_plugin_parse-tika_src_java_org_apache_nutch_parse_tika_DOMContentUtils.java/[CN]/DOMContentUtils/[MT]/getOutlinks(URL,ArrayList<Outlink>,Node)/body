{
  NodeWalker walker=new NodeWalker(node);
  while (walker.hasNext()) {
    Node currentNode=walker.nextNode();
    String nodeName=currentNode.getNodeName();
    short nodeType=currentNode.getNodeType();
    NodeList children=currentNode.getChildNodes();
    int childLen=(children != null) ? children.getLength() : 0;
    if (nodeType == Node.ELEMENT_NODE) {
      nodeName=nodeName.toLowerCase();
      LinkParams params=(LinkParams)linkParams.get(nodeName);
      if (params != null) {
        if (!shouldThrowAwayLink(currentNode,children,childLen,params)) {
          StringBuffer linkText=new StringBuffer();
          getText(linkText,currentNode,true);
          NamedNodeMap attrs=currentNode.getAttributes();
          String target=null;
          boolean noFollow=false;
          boolean post=false;
          for (int i=0; i < attrs.getLength(); i++) {
            Node attr=attrs.item(i);
            String attrName=attr.getNodeName();
            if (params.attrName.equalsIgnoreCase(attrName)) {
              target=attr.getNodeValue();
            }
 else             if ("rel".equalsIgnoreCase(attrName) && "nofollow".equalsIgnoreCase(attr.getNodeValue())) {
              noFollow=true;
            }
 else             if ("method".equalsIgnoreCase(attrName) && "post".equalsIgnoreCase(attr.getNodeValue())) {
              post=true;
            }
          }
          if (target != null && !noFollow && !post)           try {
            URL url=URLUtil.resolveURL(base,target);
            outlinks.add(new Outlink(url.toString(),linkText.toString().trim()));
          }
 catch (          MalformedURLException e) {
          }
        }
        if (params.childLen == 0)         continue;
      }
    }
  }
}
