{
  String resultText="";
  ZipInputStream zin=new ZipInputStream(input);
  ZipEntry entry;
  while ((entry=zin.getNextEntry()) != null) {
    if (!entry.isDirectory()) {
      int size=(int)entry.getSize();
      byte[] b=new byte[size];
      for (int x=0; x < size; x++) {
        int err=zin.read();
        if (err != -1) {
          b[x]=(byte)err;
        }
      }
      String newurl=url + "/";
      String fname=entry.getName();
      newurl+=fname;
      URL aURL=new URL(newurl);
      String base=aURL.toString();
      int i=fname.lastIndexOf('.');
      if (i != -1) {
        Tika tika=new Tika();
        String contentType=tika.detect(fname);
        try {
          Metadata metadata=new Metadata();
          metadata.set(Response.CONTENT_LENGTH,Long.toString(entry.getSize()));
          metadata.set(Response.CONTENT_TYPE,contentType);
          Content content=new Content(newurl,base,b,contentType,metadata,this.conf);
          Parse parse=new ParseUtil(this.conf).parse(content).get(content.getUrl());
          ParseData theParseData=parse.getData();
          Outlink[] theOutlinks=theParseData.getOutlinks();
          for (int count=0; count < theOutlinks.length; count++) {
            outLinksList.add(new Outlink(theOutlinks[count].getToUrl(),theOutlinks[count].getAnchor()));
          }
          resultText+=entry.getName() + " " + parse.getText()+ " ";
        }
 catch (        ParseException e) {
          if (LOG.isInfoEnabled()) {
            LOG.info("fetch okay, but can't parse " + fname + ", reason: "+ e.getMessage());
          }
        }
      }
    }
  }
  return resultText;
}
