{
  activeThreads.incrementAndGet();
  FetchItem item=null;
  try {
    while (true) {
      try {
        item=fetchQueue.getFetchItem();
        if (item == null) {
          if (feeder.isAlive() || fetchQueue.getSize() > 0) {
            spinWaiting.incrementAndGet();
            try {
              Thread.sleep(500);
            }
 catch (            Exception ex) {
            }
            spinWaiting.decrementAndGet();
            continue;
          }
 else {
            return;
          }
        }
        lastRequestStart.set(System.currentTimeMillis());
        CrawlDatum crawldatum=new CrawlDatum();
        String url=item.datum.getUrl();
        crawldatum.setUrl(url);
        Request request=requestFactory.createRequest(url);
        Response response=null;
        for (int i=0; i <= retry; i++) {
          if (i > 0) {
            LogUtils.getLogger().info("retry " + i + "th "+ url);
          }
          try {
            response=request.getResponse(crawldatum);
            break;
          }
 catch (          Exception ex) {
          }
        }
        crawldatum.setStatus(CrawlDatum.STATUS_DB_FETCHED);
        crawldatum.setFetchTime(System.currentTimeMillis());
        Page page=new Page();
        page.setUrl(url);
        page.setFetchTime(crawldatum.getFetchTime());
        page.setResponse(response);
        if (response == null) {
          LogUtils.getLogger().info("failed " + url);
          continue;
        }
        LogUtils.getLogger().info("fetch " + url);
        String contentType=response.getContentType();
        Visitor visitor=visitorFactory.createVisitor(url,contentType);
        try {
          dbUpdater.getSegmentWriter().wrtieFetch(crawldatum);
          if (isContentStored) {
            Content content=new Content();
            content.setUrl(url);
            if (response.getContent() != null) {
              content.setContent(response.getContent());
            }
 else {
              content.setContent(new byte[0]);
            }
            content.setContentType(contentType);
            dbUpdater.getSegmentWriter().wrtieContent(content);
          }
          if (visitor != null) {
            ArrayList<String> nextLinks=null;
            try {
              nextLinks=visitor.visitAndGetNextLinks(page);
            }
 catch (            Exception ex) {
              LogUtils.getLogger().info("Exception",ex);
            }
            if (nextLinks != null && !nextLinks.isEmpty()) {
              ArrayList<Link> parseLinks=new ArrayList<Link>();
              for (              String nextLink : nextLinks) {
                if (nextLink != null) {
                  parseLinks.add(new Link(null,nextLink));
                }
              }
              ParseData parseData=new ParseData(url,parseLinks);
              dbUpdater.getSegmentWriter().wrtieParse(new ParseResult(parseData));
            }
          }
        }
 catch (        Exception ex) {
          LogUtils.getLogger().info("Exception",ex);
        }
      }
 catch (      Exception ex) {
        LogUtils.getLogger().info("Exception",ex);
      }
    }
  }
 catch (  Exception ex) {
    LogUtils.getLogger().info("Exception",ex);
  }
 finally {
    activeThreads.decrementAndGet();
  }
}
