{
  String plugins="protocol-http|parse-tika|scoring-opic|urlfilter-regex|urlnormalizer-pass";
  int seeds=1;
  int depth=10;
  int threads=10;
  boolean delete=true;
  long topN=Long.MAX_VALUE;
  if (args.length == 0) {
    System.err.println("Usage: Benchmark [-seeds NN] [-depth NN] [-threads NN] [-keep] [-maxPerHost NN] [-plugins <regex>]");
    System.err.println("\t-seeds NN\tcreate NN unique hosts in a seed list (default: 1)");
    System.err.println("\t-depth NN\tperform NN crawl cycles (default: 10)");
    System.err.println("\t-threads NN\tuse NN threads per Fetcher task (default: 10)");
    System.err.println("\t-keep\tkeep segment data (default: delete after updatedb)");
    System.err.println("\t-plugins <regex>\toverride 'plugin.includes'.");
    System.err.println("\tNOTE: if not specified, this is reset to: " + plugins);
    System.err.println("\tNOTE: if 'default' is specified then a value set in nutch-default/nutch-site is used.");
    System.err.println("\t-maxPerHost NN\tmax. # of URLs per host in a fetchlist");
    return -1;
  }
  int maxPerHost=Integer.MAX_VALUE;
  for (int i=0; i < args.length; i++) {
    if (args[i].equals("-seeds")) {
      seeds=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-threads")) {
      threads=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-depth")) {
      depth=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-keep")) {
      delete=false;
    }
 else     if (args[i].equals("-plugins")) {
      plugins=args[++i];
    }
 else     if (args[i].equalsIgnoreCase("-maxPerHost")) {
      maxPerHost=Integer.parseInt(args[++i]);
    }
 else {
      LOG.fatal("Invalid argument: '" + args[i] + "'");
      return -1;
    }
  }
  BenchmarkResults res=benchmark(seeds,depth,threads,maxPerHost,topN,delete,plugins);
  System.out.println(res);
  return 0;
}
