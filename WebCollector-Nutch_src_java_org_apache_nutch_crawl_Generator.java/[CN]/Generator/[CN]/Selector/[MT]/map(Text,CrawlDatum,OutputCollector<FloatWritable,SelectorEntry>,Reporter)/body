{
  Text url=key;
  if (filter) {
    try {
      if (filters.filter(url.toString()) == null)       return;
    }
 catch (    URLFilterException e) {
      if (LOG.isWarnEnabled()) {
        LOG.warn("Couldn't filter url: " + url + " ("+ e.getMessage()+ ")");
      }
    }
  }
  CrawlDatum crawlDatum=value;
  if (!schedule.shouldFetch(url,crawlDatum,curTime)) {
    LOG.debug("-shouldFetch rejected '" + url + "', fetchTime="+ crawlDatum.getFetchTime()+ ", curTime="+ curTime);
    return;
  }
  LongWritable oldGenTime=(LongWritable)crawlDatum.getMetaData().get(Nutch.WRITABLE_GENERATE_TIME_KEY);
  if (oldGenTime != null) {
    if (oldGenTime.get() + genDelay > curTime)     return;
  }
  float sort=1.0f;
  try {
    sort=scfilters.generatorSortValue(key,crawlDatum,sort);
  }
 catch (  ScoringFilterException sfe) {
    if (LOG.isWarnEnabled()) {
      LOG.warn("Couldn't filter generatorSortValue for " + key + ": "+ sfe);
    }
  }
  if (restrictStatus != null && !restrictStatus.equalsIgnoreCase(CrawlDatum.getStatusName(crawlDatum.getStatus())))   return;
  if (scoreThreshold != Float.NaN && sort < scoreThreshold)   return;
  if (intervalThreshold != -1 && crawlDatum.getFetchInterval() > intervalThreshold)   return;
  sortValue.set(sort);
  crawlDatum.getMetaData().put(Nutch.WRITABLE_GENERATE_TIME_KEY,genTime);
  entry.datum=crawlDatum;
  entry.url=key;
  output.collect(sortValue,entry);
}
