{
  curTime=job.getLong(GENERATOR_CUR_TIME,System.currentTimeMillis());
  limit=job.getLong(GENERATOR_TOP_N,Long.MAX_VALUE) / job.getNumReduceTasks();
  maxCount=job.getInt(GENERATOR_MAX_COUNT,-1);
  if (maxCount == -1) {
    byDomain=false;
  }
  if (GENERATOR_COUNT_VALUE_DOMAIN.equals(job.get(GENERATOR_COUNT_MODE)))   byDomain=true;
  filters=new URLFilters(job);
  normalise=job.getBoolean(GENERATOR_NORMALISE,true);
  if (normalise)   normalizers=new URLNormalizers(job,URLNormalizers.SCOPE_GENERATE_HOST_COUNT);
  scfilters=new ScoringFilters(job);
  partitioner.configure(job);
  filter=job.getBoolean(GENERATOR_FILTER,true);
  genDelay=job.getLong(GENERATOR_DELAY,7L) * 3600L * 24L* 1000L;
  long time=job.getLong(Nutch.GENERATE_TIME_KEY,0L);
  if (time > 0)   genTime.set(time);
  schedule=FetchScheduleFactory.getFetchSchedule(job);
  scoreThreshold=job.getFloat(GENERATOR_MIN_SCORE,Float.NaN);
  intervalThreshold=job.getInt(GENERATOR_MIN_INTERVAL,-1);
  restrictStatus=job.get(GENERATOR_RESTRICT_STATUS,null);
  maxNumSegments=job.getInt(GENERATOR_MAX_NUM_SEGMENTS,1);
  segCounts=new int[maxNumSegments];
}
