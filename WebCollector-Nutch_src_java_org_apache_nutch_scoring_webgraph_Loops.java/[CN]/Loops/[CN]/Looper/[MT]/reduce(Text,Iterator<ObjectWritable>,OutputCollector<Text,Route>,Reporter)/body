{
  List<Route> routeList=new ArrayList<Route>();
  Set<String> outlinkUrls=new LinkedHashSet<String>();
  int numValues=0;
  while (values.hasNext()) {
    ObjectWritable next=values.next();
    Object value=next.get();
    if (value instanceof Route) {
      routeList.add(WritableUtils.clone((Route)value,conf));
    }
 else     if (value instanceof Text) {
      String outlinkUrl=((Text)value).toString();
      if (!outlinkUrls.contains(outlinkUrl)) {
        outlinkUrls.add(outlinkUrl);
      }
    }
    numValues++;
    if (numValues % 100 == 0) {
      reporter.progress();
    }
  }
  Iterator<Route> routeIt=routeList.listIterator();
  while (routeIt.hasNext()) {
    Route route=routeIt.next();
    routeIt.remove();
    if (route.isFound()) {
      output.collect(key,route);
    }
 else {
      String lookingFor=route.getLookingFor();
      if (outlinkUrls.contains(lookingFor)) {
        route.setFound(true);
        output.collect(key,route);
      }
 else       if (!last) {
        for (        String outlink : outlinkUrls) {
          output.collect(new Text(outlink),route);
        }
      }
    }
  }
}
