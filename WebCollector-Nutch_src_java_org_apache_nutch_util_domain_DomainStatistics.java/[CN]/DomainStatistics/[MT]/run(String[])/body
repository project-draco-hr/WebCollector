{
  if (args.length < 3) {
    System.out.println("usage: DomainStatistics inputDirs outDir host|domain|suffix|tld [numOfReducer]");
    return 1;
  }
  String inputDir=args[0];
  String outputDir=args[1];
  int numOfReducers=1;
  if (args.length > 3) {
    numOfReducers=Integer.parseInt(args[3]);
  }
  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  long start=System.currentTimeMillis();
  LOG.info("DomainStatistics: starting at " + sdf.format(start));
  int mode=0;
  String jobName="DomainStatistics";
  if (args[2].equals("host")) {
    jobName="Host statistics";
    mode=MODE_HOST;
  }
 else   if (args[2].equals("domain")) {
    jobName="Domain statistics";
    mode=MODE_DOMAIN;
  }
 else   if (args[2].equals("suffix")) {
    jobName="Suffix statistics";
    mode=MODE_SUFFIX;
  }
 else   if (args[2].equals("tld")) {
    jobName="TLD statistics";
    mode=MODE_TLD;
  }
  Configuration conf=getConf();
  conf.setInt("domain.statistics.mode",mode);
  conf.setBoolean("mapreduce.fileoutputcommitter.marksuccessfuljobs",false);
  Job job=new Job(conf,jobName);
  job.setJarByClass(DomainStatistics.class);
  String[] inputDirsSpecs=inputDir.split(",");
  for (int i=0; i < inputDirsSpecs.length; i++) {
    FileInputFormat.addInputPath(job,new Path(inputDirsSpecs[i]));
  }
  job.setInputFormatClass(SequenceFileInputFormat.class);
  FileOutputFormat.setOutputPath(job,new Path(outputDir));
  job.setOutputFormatClass(TextOutputFormat.class);
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(LongWritable.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(LongWritable.class);
  job.setMapperClass(DomainStatisticsMapper.class);
  job.setReducerClass(DomainStatisticsReducer.class);
  job.setCombinerClass(DomainStatisticsCombiner.class);
  job.setNumReduceTasks(numOfReducers);
  try {
    job.waitForCompletion(true);
  }
 catch (  Exception e) {
    throw e;
  }
  long end=System.currentTimeMillis();
  LOG.info("DomainStatistics: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));
  return 0;
}
