{
  Configuration conf=tac.getConfiguration();
  FileSystem fs=FileSystem.get(conf);
  String outputPath=conf.get("mapred.output.dir");
  Path fetchPath=new Path(outputPath,"fetch/info");
  Path contentPath=new Path(outputPath,"content/info");
  Path parseDataPath=new Path(outputPath,"parse/info");
  Path redirectPath=new Path(outputPath,"redirect/info");
  final SequenceFile.Writer fetchOut=new SequenceFile.Writer(fs,conf,fetchPath,Text.class,CrawlDatum.class);
  final SequenceFile.Writer contentOut=new SequenceFile.Writer(fs,conf,contentPath,Text.class,Content.class);
  final SequenceFile.Writer parseDataOut=new SequenceFile.Writer(fs,conf,parseDataPath,Text.class,CrawlDatum.class);
  final SequenceFile.Writer redirectOut=new SequenceFile.Writer(fs,conf,redirectPath,CrawlDatum.class,Text.class);
  return new RecordWriter<Text,Writable>(){
    @Override public void write(    Text k,    Writable v) throws IOException, InterruptedException {
      if (v instanceof CrawlDatum) {
        fetchOut.append(k,v);
      }
 else       if (v instanceof Content) {
        contentOut.append(k,v);
      }
 else       if (v instanceof ParseData) {
        ParseData parseData=(ParseData)v;
        CrawlDatums next=parseData.next;
        for (        CrawlDatum datum : next) {
          parseDataOut.append(new Text(datum.getKey()),datum);
        }
      }
 else       if (v instanceof Redirect) {
        Redirect redirect=(Redirect)v;
        redirectOut.append(redirect.datum,new Text(redirect.realUrl));
      }
    }
    @Override public void close(    TaskAttemptContext tac) throws IOException, InterruptedException {
      fetchOut.close();
      contentOut.close();
      parseDataOut.close();
      redirectOut.close();
    }
  }
;
}
