{
  super.setFetchSchedule(url,datum,prevFetchTime,prevModifiedTime,fetchTime,modifiedTime,state);
  float interval=datum.getFetchInterval();
  long refTime=fetchTime;
  interval=(interval == 0) ? defaultInterval : interval;
  if (datum.getMetaData().containsKey(Nutch.WRITABLE_FIXED_INTERVAL_KEY)) {
    FloatWritable customIntervalWritable=(FloatWritable)(datum.getMetaData().get(Nutch.WRITABLE_FIXED_INTERVAL_KEY));
    interval=customIntervalWritable.get();
  }
 else {
    if (modifiedTime <= 0)     modifiedTime=fetchTime;
switch (state) {
case FetchSchedule.STATUS_MODIFIED:
      interval*=(1.0f - DEC_RATE);
    break;
case FetchSchedule.STATUS_NOTMODIFIED:
  interval*=(1.0f + INC_RATE);
break;
case FetchSchedule.STATUS_UNKNOWN:
break;
}
if (SYNC_DELTA) {
long delta=(fetchTime - modifiedTime) / 1000L;
if (delta > interval) interval=delta;
refTime=fetchTime - Math.round(delta * SYNC_DELTA_RATE * 1000);
}
if (interval < MIN_INTERVAL) {
interval=MIN_INTERVAL;
}
 else if (interval > MAX_INTERVAL) {
interval=MAX_INTERVAL;
}
}
datum.setFetchInterval(interval);
datum.setFetchTime(refTime + Math.round(interval * 1000.0));
datum.setModifiedTime(modifiedTime);
return datum;
}
