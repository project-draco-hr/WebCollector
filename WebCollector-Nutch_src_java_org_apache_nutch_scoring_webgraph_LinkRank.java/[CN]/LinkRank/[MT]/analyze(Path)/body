{
  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  long start=System.currentTimeMillis();
  LOG.info("Analysis: starting at " + sdf.format(start));
  Path linkRank=new Path(webGraphDb,"linkrank");
  Configuration conf=getConf();
  FileSystem fs=FileSystem.get(conf);
  if (!fs.exists(linkRank)) {
    fs.mkdirs(linkRank);
  }
  Path wgOutlinkDb=new Path(webGraphDb,WebGraph.OUTLINK_DIR);
  Path wgNodeDb=new Path(webGraphDb,WebGraph.NODE_DIR);
  Path nodeDb=new Path(linkRank,WebGraph.NODE_DIR);
  Path loopDb=new Path(webGraphDb,Loops.LOOPS_DIR);
  if (!fs.exists(loopDb)) {
    loopDb=null;
  }
  int numLinks=runCounter(fs,webGraphDb);
  runInitializer(wgNodeDb,nodeDb);
  float rankOneScore=(1f / (float)numLinks);
  if (LOG.isInfoEnabled()) {
    LOG.info("Analysis: Number of links: " + numLinks);
    LOG.info("Analysis: Rank One: " + rankOneScore);
  }
  int numIterations=conf.getInt("link.analyze.num.iterations",10);
  for (int i=0; i < numIterations; i++) {
    LOG.info("Analysis: Starting iteration " + (i + 1) + " of "+ numIterations);
    Path tempRank=new Path(linkRank + "-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));
    fs.mkdirs(tempRank);
    Path tempInverted=new Path(tempRank,"inverted");
    Path tempNodeDb=new Path(tempRank,WebGraph.NODE_DIR);
    runInverter(nodeDb,wgOutlinkDb,loopDb,tempInverted);
    runAnalysis(nodeDb,tempInverted,tempNodeDb,i,numIterations,rankOneScore);
    LOG.info("Analysis: Installing new link scores");
    FSUtils.replace(fs,linkRank,tempRank,true);
    LOG.info("Analysis: finished iteration " + (i + 1) + " of "+ numIterations);
  }
  LOG.info("Analysis: Installing web graph nodes");
  FSUtils.replace(fs,wgNodeDb,nodeDb,true);
  fs.delete(linkRank,true);
  long end=System.currentTimeMillis();
  LOG.info("Analysis: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));
}
