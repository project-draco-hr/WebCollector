{
  this.orig=url.toString();
  this.base=url.toString();
  this.ftp=ftp;
  this.conf=conf;
  if (!"ftp".equals(url.getProtocol()))   throw new FtpException("Not a ftp url:" + url);
  if (url.getPath() != url.getFile()) {
    if (Ftp.LOG.isWarnEnabled()) {
      Ftp.LOG.warn("url.getPath() != url.getFile(): " + url);
    }
  }
  String path="".equals(url.getPath()) ? "/" : url.getPath();
  try {
    if (ftp.followTalk) {
      if (Ftp.LOG.isInfoEnabled()) {
        Ftp.LOG.info("fetching " + url);
      }
    }
 else {
      if (Ftp.LOG.isTraceEnabled()) {
        Ftp.LOG.trace("fetching " + url);
      }
    }
    InetAddress addr=InetAddress.getByName(url.getHost());
    if (addr != null && conf.getBoolean("store.ip.address",false) == true) {
      headers.add("_ip_",addr.getHostAddress());
    }
    if (ftp.client != null && ftp.keepConnection && ftp.renewalTime < System.currentTimeMillis()) {
      if (Ftp.LOG.isInfoEnabled()) {
        Ftp.LOG.info("delete client because idled too long");
      }
      ftp.client=null;
    }
    if (ftp.client == null) {
      if ((ftp.followTalk) && (Ftp.LOG.isInfoEnabled())) {
        Ftp.LOG.info("start client");
      }
      ftp.client=new Client();
      ftp.client.setDefaultTimeout(ftp.timeout);
      ftp.client.setDataTimeout(ftp.timeout);
      if (ftp.followTalk)       ftp.client.addProtocolCommandListener(new PrintCommandListener(Ftp.LOG));
    }
    if (ftp.client.isConnected()) {
      InetAddress remoteAddress=ftp.client.getRemoteAddress();
      if (!addr.equals(remoteAddress)) {
        if ((ftp.followTalk) && (Ftp.LOG.isInfoEnabled())) {
          Ftp.LOG.info("disconnect from " + remoteAddress + " before connect to "+ addr);
        }
        ftp.client.logout();
        ftp.client.disconnect();
      }
    }
    if (!ftp.client.isConnected()) {
      if ((ftp.followTalk) && (Ftp.LOG.isInfoEnabled())) {
        Ftp.LOG.info("connect to " + addr);
      }
      ftp.client.connect(addr);
      if (!FTPReply.isPositiveCompletion(ftp.client.getReplyCode())) {
        ftp.client.disconnect();
        if (Ftp.LOG.isWarnEnabled()) {
          Ftp.LOG.warn("ftp.client.connect() failed: " + addr + " "+ ftp.client.getReplyString());
        }
        this.code=500;
        return;
      }
      if ((ftp.followTalk) && (Ftp.LOG.isInfoEnabled())) {
        Ftp.LOG.info("log into " + addr);
      }
      if (!ftp.client.login(ftp.userName,ftp.passWord)) {
        ftp.client.disconnect();
        if (Ftp.LOG.isWarnEnabled()) {
          Ftp.LOG.warn("ftp.client.login() failed: " + addr);
        }
        this.code=401;
        return;
      }
      if (!ftp.client.setFileType(FTP.BINARY_FILE_TYPE)) {
        ftp.client.logout();
        ftp.client.disconnect();
        if (Ftp.LOG.isWarnEnabled()) {
          Ftp.LOG.warn("ftp.client.setFileType() failed: " + addr);
        }
        this.code=500;
        return;
      }
      if ((ftp.followTalk) && (Ftp.LOG.isInfoEnabled())) {
        Ftp.LOG.info("set parser for " + addr);
      }
      try {
        ftp.parser=null;
        String parserKey=ftp.client.getSystemName();
        if (parserKey.startsWith("UNKNOWN Type: L8"))         parserKey="UNIX Type: L8";
        ftp.parser=(new DefaultFTPFileEntryParserFactory()).createFileEntryParser(parserKey);
      }
 catch (      FtpExceptionBadSystResponse e) {
        if (Ftp.LOG.isWarnEnabled()) {
          Ftp.LOG.warn("ftp.client.getSystemName() failed: " + addr + " "+ e);
        }
        ftp.parser=null;
      }
catch (      ParserInitializationException e) {
        if (Ftp.LOG.isWarnEnabled()) {
          Ftp.LOG.warn("createFileEntryParser() failed. " + addr + " "+ e);
        }
        ftp.parser=null;
      }
 finally {
        if (ftp.parser == null) {
          if (Ftp.LOG.isWarnEnabled()) {
            Ftp.LOG.warn("ftp.parser is null: " + addr);
          }
          ftp.client.logout();
          ftp.client.disconnect();
          this.code=500;
          return;
        }
      }
    }
 else {
      if ((ftp.followTalk) && (Ftp.LOG.isInfoEnabled())) {
        Ftp.LOG.info("use existing connection");
      }
    }
    this.content=null;
    if (path.endsWith("/")) {
      getDirAsHttpResponse(path,datum.getModifiedTime());
    }
 else {
      getFileAsHttpResponse(path,datum.getModifiedTime());
    }
    if (ftp.client != null && ftp.keepConnection) {
      ftp.renewalTime=System.currentTimeMillis() + ((ftp.timeout < ftp.serverTimeout) ? ftp.timeout : ftp.serverTimeout);
      if ((ftp.followTalk) && (Ftp.LOG.isInfoEnabled())) {
        Ftp.LOG.info("reset renewalTime to " + HttpDateFormat.toString(ftp.renewalTime));
      }
    }
    if (ftp.client != null && !ftp.keepConnection) {
      if ((ftp.followTalk) && (Ftp.LOG.isInfoEnabled())) {
        Ftp.LOG.info("disconnect from " + addr);
      }
      ftp.client.logout();
      ftp.client.disconnect();
    }
  }
 catch (  Exception e) {
    if (Ftp.LOG.isWarnEnabled()) {
      Ftp.LOG.warn("Error: ",e);
    }
    if ((ftp.followTalk) && (Ftp.LOG.isInfoEnabled())) {
      Ftp.LOG.info("delete client due to exception");
    }
    ftp.client=null;
    throw new FtpException(e);
  }
}
