{
  Path newLinkDb=new Path("linkdb-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));
  JobConf job=new NutchJob(config);
  job.setJobName("linkdb " + linkDb);
  job.setInputFormat(SequenceFileInputFormat.class);
  job.setMapperClass(LinkDb.class);
  job.setCombinerClass(LinkDbMerger.class);
  if (normalize || filter) {
    try {
      FileSystem fs=FileSystem.get(config);
      if (!fs.exists(linkDb)) {
        job.setBoolean(LinkDbFilter.URL_FILTERING,filter);
        job.setBoolean(LinkDbFilter.URL_NORMALIZING,normalize);
      }
    }
 catch (    Exception e) {
      LOG.warn("LinkDb createJob: " + e);
    }
  }
  job.setReducerClass(LinkDbMerger.class);
  FileOutputFormat.setOutputPath(job,newLinkDb);
  job.setOutputFormat(MapFileOutputFormat.class);
  job.setBoolean("mapred.output.compress",true);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Inlinks.class);
  return job;
}
