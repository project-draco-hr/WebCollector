{
  if (args.length < 2) {
    System.err.println("Usage: LinkDb <linkdb> (-dir <segmentsDir> | <seg1> <seg2> ...) [-force] [-noNormalize] [-noFilter]");
    System.err.println("\tlinkdb\toutput LinkDb to create or update");
    System.err.println("\t-dir segmentsDir\tparent directory of several segments, OR");
    System.err.println("\tseg1 seg2 ...\t list of segment directories");
    System.err.println("\t-force\tforce update even if LinkDb appears to be locked (CAUTION advised)");
    System.err.println("\t-noNormalize\tdon't normalize link URLs");
    System.err.println("\t-noFilter\tdon't apply URLFilters to link URLs");
    return -1;
  }
  Path segDir=null;
  final FileSystem fs=FileSystem.get(getConf());
  Path db=new Path(args[0]);
  ArrayList<Path> segs=new ArrayList<Path>();
  boolean filter=true;
  boolean normalize=true;
  boolean force=false;
  for (int i=1; i < args.length; i++) {
    if (args[i].equals("-dir")) {
      FileStatus[] paths=fs.listStatus(new Path(args[++i]),HadoopFSUtil.getPassDirectoriesFilter(fs));
      segs.addAll(Arrays.asList(HadoopFSUtil.getPaths(paths)));
    }
 else     if (args[i].equalsIgnoreCase("-noNormalize")) {
      normalize=false;
    }
 else     if (args[i].equalsIgnoreCase("-noFilter")) {
      filter=false;
    }
 else     if (args[i].equalsIgnoreCase("-force")) {
      force=true;
    }
 else     segs.add(new Path(args[i]));
  }
  try {
    invert(db,segs.toArray(new Path[segs.size()]),normalize,filter,force);
    return 0;
  }
 catch (  Exception e) {
    LOG.error("LinkDb: " + StringUtils.stringifyException(e));
    return -1;
  }
}
