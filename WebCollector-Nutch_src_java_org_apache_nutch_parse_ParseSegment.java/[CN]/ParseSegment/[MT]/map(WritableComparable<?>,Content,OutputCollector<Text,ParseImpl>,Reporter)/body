{
  if (key instanceof Text) {
    newKey.set(key.toString());
    key=newKey;
  }
  int status=Integer.parseInt(content.getMetadata().get(Nutch.FETCH_STATUS_KEY));
  if (status != CrawlDatum.STATUS_FETCH_SUCCESS) {
    LOG.debug("Skipping " + key + " as content is not fetched successfully");
    return;
  }
  if (skipTruncated && isTruncated(content)) {
    return;
  }
  ParseResult parseResult=null;
  try {
    if (parseUtil == null)     parseUtil=new ParseUtil(getConf());
    parseResult=parseUtil.parse(content);
  }
 catch (  Exception e) {
    LOG.warn("Error parsing: " + key + ": "+ StringUtils.stringifyException(e));
    return;
  }
  for (  Entry<Text,Parse> entry : parseResult) {
    Text url=entry.getKey();
    Parse parse=entry.getValue();
    ParseStatus parseStatus=parse.getData().getStatus();
    long start=System.currentTimeMillis();
    reporter.incrCounter("ParserStatus",ParseStatus.majorCodes[parseStatus.getMajorCode()],1);
    if (!parseStatus.isSuccess()) {
      LOG.warn("Error parsing: " + key + ": "+ parseStatus);
      parse=parseStatus.getEmptyParse(getConf());
    }
    parse.getData().getContentMeta().set(Nutch.SEGMENT_NAME_KEY,getConf().get(Nutch.SEGMENT_NAME_KEY));
    byte[] signature=SignatureFactory.getSignature(getConf()).calculate(content,parse);
    parse.getData().getContentMeta().set(Nutch.SIGNATURE_KEY,StringUtil.toHexString(signature));
    try {
      scfilters.passScoreAfterParsing(url,content,parse);
    }
 catch (    ScoringFilterException e) {
      if (LOG.isWarnEnabled()) {
        LOG.warn("Error passing score: " + url + ": "+ e.getMessage());
      }
    }
    long end=System.currentTimeMillis();
    LOG.info("Parsed (" + Long.toString(end - start) + "ms):"+ url);
    output.collect(url,new ParseImpl(new ParseText(parse.getText()),parse.getData(),parse.isCanonical()));
  }
}
