{
  Inlinks inlinks=null;
  CrawlDatum dbDatum=null;
  CrawlDatum fetchDatum=null;
  ParseData parseData=null;
  ParseText parseText=null;
  while (values.hasNext()) {
    final Writable value=values.next().get();
    if (value instanceof Inlinks) {
      inlinks=(Inlinks)value;
    }
 else     if (value instanceof CrawlDatum) {
      final CrawlDatum datum=(CrawlDatum)value;
      if (CrawlDatum.hasDbStatus(datum)) {
        dbDatum=datum;
      }
 else       if (CrawlDatum.hasFetchStatus(datum)) {
        if (datum.getStatus() != CrawlDatum.STATUS_FETCH_NOTMODIFIED) {
          fetchDatum=datum;
        }
      }
 else       if (CrawlDatum.STATUS_LINKED == datum.getStatus() || CrawlDatum.STATUS_SIGNATURE == datum.getStatus() || CrawlDatum.STATUS_PARSE_META == datum.getStatus()) {
        continue;
      }
 else {
        throw new RuntimeException("Unexpected status: " + datum.getStatus());
      }
    }
 else     if (value instanceof ParseData) {
      parseData=(ParseData)value;
      if (deleteRobotsNoIndex) {
        String robotsMeta=parseData.getMeta("robots");
        if (robotsMeta != null && robotsMeta.toLowerCase().indexOf("noindex") != -1) {
          NutchIndexAction action=new NutchIndexAction(null,NutchIndexAction.DELETE);
          output.collect(key,action);
          return;
        }
      }
    }
 else     if (value instanceof ParseText) {
      parseText=(ParseText)value;
    }
 else     if (LOG.isWarnEnabled()) {
      LOG.warn("Unrecognized type: " + value.getClass());
    }
  }
  if (delete && fetchDatum != null && dbDatum != null) {
    if (fetchDatum.getStatus() == CrawlDatum.STATUS_FETCH_GONE || dbDatum.getStatus() == CrawlDatum.STATUS_DB_GONE) {
      reporter.incrCounter("IndexerStatus","Documents deleted",1);
      NutchIndexAction action=new NutchIndexAction(null,NutchIndexAction.DELETE);
      output.collect(key,action);
      return;
    }
    if (fetchDatum.getStatus() == CrawlDatum.STATUS_FETCH_REDIR_PERM || fetchDatum.getStatus() == CrawlDatum.STATUS_FETCH_REDIR_TEMP || dbDatum.getStatus() == CrawlDatum.STATUS_DB_REDIR_PERM || dbDatum.getStatus() == CrawlDatum.STATUS_DB_REDIR_TEMP) {
      reporter.incrCounter("IndexerStatus","Deleted redirects",1);
      reporter.incrCounter("IndexerStatus","Perm redirects deleted",1);
      NutchIndexAction action=new NutchIndexAction(null,NutchIndexAction.DELETE);
      output.collect(key,action);
      return;
    }
  }
  if (fetchDatum == null || dbDatum == null || parseText == null || parseData == null) {
    return;
  }
  if (delete && dbDatum.getStatus() == CrawlDatum.STATUS_DB_DUPLICATE) {
    reporter.incrCounter("IndexerStatus","Duplicates deleted",1);
    NutchIndexAction action=new NutchIndexAction(null,NutchIndexAction.DELETE);
    output.collect(key,action);
    return;
  }
  if (skip && dbDatum.getStatus() == CrawlDatum.STATUS_DB_NOTMODIFIED) {
    reporter.incrCounter("IndexerStatus","Skipped",1);
    return;
  }
  if (!parseData.getStatus().isSuccess() || fetchDatum.getStatus() != CrawlDatum.STATUS_FETCH_SUCCESS) {
    return;
  }
  NutchDocument doc=new NutchDocument();
  doc.add("id",key.toString());
  final Metadata metadata=parseData.getContentMeta();
  doc.add("segment",metadata.get(Nutch.SEGMENT_NAME_KEY));
  doc.add("digest",metadata.get(Nutch.SIGNATURE_KEY));
  final Parse parse=new ParseImpl(parseText,parseData);
  try {
    final Text url=(Text)dbDatum.getMetaData().get(Nutch.WRITABLE_REPR_URL_KEY);
    if (url != null) {
      String urlString=filterUrl(normalizeUrl(url.toString()));
      if (urlString != null) {
        url.set(urlString);
        fetchDatum.getMetaData().put(Nutch.WRITABLE_REPR_URL_KEY,url);
      }
    }
    doc=this.filters.filter(doc,parse,key,fetchDatum,inlinks);
  }
 catch (  final IndexingException e) {
    if (LOG.isWarnEnabled()) {
      LOG.warn("Error indexing " + key + ": "+ e);
    }
    reporter.incrCounter("IndexerStatus","Errors",1);
    return;
  }
  if (doc == null) {
    reporter.incrCounter("IndexerStatus","Skipped by filters",1);
    return;
  }
  float boost=1.0f;
  try {
    boost=this.scfilters.indexerScore(key,doc,dbDatum,fetchDatum,parse,inlinks,boost);
  }
 catch (  final ScoringFilterException e) {
    if (LOG.isWarnEnabled()) {
      LOG.warn("Error calculating score " + key + ": "+ e);
    }
    return;
  }
  doc.setWeight(boost);
  doc.add("boost",Float.toString(boost));
  reporter.incrCounter("IndexerStatus","Documents added",1);
  NutchIndexAction action=new NutchIndexAction(doc,NutchIndexAction.ADD);
  output.collect(key,action);
}
