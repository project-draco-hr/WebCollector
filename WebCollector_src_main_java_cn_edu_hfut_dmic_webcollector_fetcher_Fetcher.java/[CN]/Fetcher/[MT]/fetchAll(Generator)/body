{
  if (executor == null) {
    LOG.info("Please Specify A Executor!");
    return;
  }
  try {
    if (dbManager.isLocked()) {
      dbManager.merge();
      dbManager.unlock();
    }
  }
 catch (  Exception ex) {
    LOG.info("Exception when merging history");
  }
  try {
    dbManager.lock();
    generator.open();
    LOG.info("open generator:" + generator.getClass().getName());
    dbManager.initSegmentWriter();
    LOG.info("init segmentWriter:" + dbManager.getClass().getName());
    running=true;
    lastRequestStart=new AtomicLong(System.currentTimeMillis());
    activeThreads=new AtomicInteger(0);
    spinWaiting=new AtomicInteger(0);
    fetchQueue=new FetchQueue();
    feeder=new QueueFeeder(fetchQueue,generator,1000);
    feeder.start();
    FetcherThread[] fetcherThreads=new FetcherThread[threads];
    for (int i=0; i < threads; i++) {
      fetcherThreads[i]=new FetcherThread();
      fetcherThreads[i].start();
    }
    do {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ex) {
      }
      LOG.info("-activeThreads=" + activeThreads.get() + ", spinWaiting="+ spinWaiting.get()+ ", fetchQueue.size="+ fetchQueue.getSize());
      if (!feeder.isAlive() && fetchQueue.getSize() < 5) {
        fetchQueue.dump();
      }
      if ((System.currentTimeMillis() - lastRequestStart.get()) > Config.THREAD_KILLER) {
        LOG.info("Aborting with " + activeThreads + " hung threads.");
        break;
      }
    }
 while (activeThreads.get() > 0 && running);
    running=false;
    long waitThreadEndStartTime=System.currentTimeMillis();
    if (activeThreads.get() > 0) {
      LOG.info("wait for activeThreads to end");
    }
    while (activeThreads.get() > 0) {
      LOG.info("-activeThreads=" + activeThreads.get());
      try {
        Thread.sleep(500);
      }
 catch (      Exception ex) {
      }
      if (System.currentTimeMillis() - waitThreadEndStartTime > Config.WAIT_THREAD_END_TIME) {
        LOG.info("kill threads");
        for (int i=0; i < fetcherThreads.length; i++) {
          if (fetcherThreads[i].isAlive()) {
            try {
              fetcherThreads[i].stop();
              LOG.info("kill thread " + i);
            }
 catch (            Exception ex) {
              LOG.info("Exception",ex);
            }
          }
        }
        break;
      }
    }
    LOG.info("clear all activeThread");
    feeder.stopFeeder();
    fetchQueue.clear();
  }
  finally {
    generator.close();
    LOG.info("close generator:" + generator.getClass().getName());
    dbManager.closeSegmentWriter();
    LOG.info("close segmentwriter:" + dbManager.getClass().getName());
    dbManager.merge();
    dbManager.unlock();
  }
}
