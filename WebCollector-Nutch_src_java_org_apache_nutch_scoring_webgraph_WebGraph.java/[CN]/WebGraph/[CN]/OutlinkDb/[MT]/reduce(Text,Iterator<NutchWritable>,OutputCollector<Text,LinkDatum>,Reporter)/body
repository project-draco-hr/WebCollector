{
  long mostRecent=0L;
  List<LinkDatum> outlinkList=new ArrayList<LinkDatum>();
  while (values.hasNext()) {
    Writable value=values.next().get();
    if (value instanceof LinkDatum) {
      LinkDatum next=(LinkDatum)value;
      long timestamp=next.getTimestamp();
      if (mostRecent == 0L || mostRecent < timestamp) {
        mostRecent=timestamp;
      }
      outlinkList.add(WritableUtils.clone(next,conf));
      reporter.incrCounter("WebGraph.outlinks","added links",1);
    }
 else     if (value instanceof BooleanWritable) {
      BooleanWritable delete=(BooleanWritable)value;
      if (delete.get() == true) {
        reporter.incrCounter("WebGraph.outlinks","removed links",1);
        return;
      }
    }
  }
  String url=key.toString();
  String domain=URLUtil.getDomainName(url);
  String host=URLUtil.getHost(url);
  Set<String> domains=new HashSet<String>();
  Set<String> pages=new HashSet<String>();
  for (  LinkDatum datum : outlinkList) {
    String toUrl=datum.getUrl();
    String toDomain=URLUtil.getDomainName(toUrl);
    String toHost=URLUtil.getHost(toUrl);
    String toPage=URLUtil.getPage(toUrl);
    datum.setLinkType(LinkDatum.OUTLINK);
    if (datum.getTimestamp() == mostRecent && (!limitPages || (limitPages && !pages.contains(toPage))) && (!limitDomains || (limitDomains && !domains.contains(toDomain))) && (!ignoreHost || (ignoreHost && !toHost.equalsIgnoreCase(host))) && (!ignoreDomain || (ignoreDomain && !toDomain.equalsIgnoreCase(domain)))) {
      output.collect(key,datum);
      pages.add(toPage);
      domains.add(toDomain);
    }
  }
}
