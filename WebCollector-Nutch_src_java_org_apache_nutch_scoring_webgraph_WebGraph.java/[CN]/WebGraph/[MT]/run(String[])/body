{
  Options options=new Options();
  OptionBuilder.withArgName("help");
  OptionBuilder.withDescription("show this help message");
  Option helpOpts=OptionBuilder.create("help");
  options.addOption(helpOpts);
  OptionBuilder.withArgName("webgraphdb");
  OptionBuilder.hasArg();
  OptionBuilder.withDescription("the web graph database to use");
  Option webGraphDbOpts=OptionBuilder.create("webgraphdb");
  options.addOption(webGraphDbOpts);
  OptionBuilder.withArgName("segment");
  OptionBuilder.hasArgs();
  OptionBuilder.withDescription("the segment(s) to use");
  Option segOpts=OptionBuilder.create("segment");
  options.addOption(segOpts);
  OptionBuilder.withArgName("segmentDir");
  OptionBuilder.hasArgs();
  OptionBuilder.withDescription("the segment directory to use");
  Option segDirOpts=OptionBuilder.create("segmentDir");
  options.addOption(segDirOpts);
  OptionBuilder.withArgName("normalize");
  OptionBuilder.withDescription("whether to use URLNormalizers on the URL's in the segment");
  Option normalizeOpts=OptionBuilder.create("normalize");
  options.addOption(normalizeOpts);
  OptionBuilder.withArgName("filter");
  OptionBuilder.withDescription("whether to use URLFilters on the URL's in the segment");
  Option filterOpts=OptionBuilder.create("filter");
  options.addOption(filterOpts);
  CommandLineParser parser=new GnuParser();
  try {
    CommandLine line=parser.parse(options,args);
    if (line.hasOption("help") || !line.hasOption("webgraphdb") || (!line.hasOption("segment") && !line.hasOption("segmentDir"))) {
      HelpFormatter formatter=new HelpFormatter();
      formatter.printHelp("WebGraph",options);
      return -1;
    }
    String webGraphDb=line.getOptionValue("webgraphdb");
    Path[] segPaths=null;
    if (line.hasOption("segment")) {
      String[] segments=line.getOptionValues("segment");
      segPaths=new Path[segments.length];
      for (int i=0; i < segments.length; i++) {
        segPaths[i]=new Path(segments[i]);
      }
    }
    if (line.hasOption("segmentDir")) {
      Path dir=new Path(line.getOptionValue("segmentDir"));
      FileSystem fs=dir.getFileSystem(getConf());
      FileStatus[] fstats=fs.listStatus(dir,HadoopFSUtil.getPassDirectoriesFilter(fs));
      segPaths=HadoopFSUtil.getPaths(fstats);
    }
    boolean normalize=false;
    if (line.hasOption("normalize")) {
      normalize=true;
    }
    boolean filter=false;
    if (line.hasOption("filter")) {
      filter=true;
    }
    createWebGraph(new Path(webGraphDb),segPaths,normalize,filter);
    return 0;
  }
 catch (  Exception e) {
    LOG.error("WebGraph: " + StringUtils.stringifyException(e));
    return -2;
  }
}
