{
  float score1=readFloat(b1,s1 + SCORE_OFFSET);
  float score2=readFloat(b2,s2 + SCORE_OFFSET);
  if (score2 != score1) {
    return (score2 - score1) > 0 ? 1 : -1;
  }
  int status1=b1[s1 + 1];
  int status2=b2[s2 + 1];
  if (status2 != status1)   return status1 - status2;
  long fetchTime1=readLong(b1,s1 + 1 + 1);
  long fetchTime2=readLong(b2,s2 + 1 + 1);
  if (fetchTime2 != fetchTime1)   return (fetchTime2 - fetchTime1) > 0 ? 1 : -1;
  int retries1=b1[s1 + 1 + 1+ 8];
  int retries2=b2[s2 + 1 + 1+ 8];
  if (retries2 != retries1)   return retries2 - retries1;
  int fetchInterval1=readInt(b1,s1 + 1 + 1+ 8+ 1);
  int fetchInterval2=readInt(b2,s2 + 1 + 1+ 8+ 1);
  if (fetchInterval2 != fetchInterval1)   return (fetchInterval2 - fetchInterval1) > 0 ? 1 : -1;
  long modifiedTime1=readLong(b1,s1 + SCORE_OFFSET + 4);
  long modifiedTime2=readLong(b2,s2 + SCORE_OFFSET + 4);
  if (modifiedTime2 != modifiedTime1)   return (modifiedTime2 - modifiedTime1) > 0 ? 1 : -1;
  int sigl1=b1[s1 + SIG_OFFSET];
  int sigl2=b2[s2 + SIG_OFFSET];
  return SignatureComparator._compare(b1,SIG_OFFSET,sigl1,b2,SIG_OFFSET,sigl2);
}
