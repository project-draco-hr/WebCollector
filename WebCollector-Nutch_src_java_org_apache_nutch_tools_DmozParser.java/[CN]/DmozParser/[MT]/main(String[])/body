{
  if (argv.length < 1) {
    System.err.println("Usage: DmozParser <dmoz_file> [-subset <subsetDenominator>] [-includeAdultMaterial] [-skew skew] [-topicFile <topic list file>] [-topic <topic> [-topic <topic> [...]]]");
    return;
  }
  int subsetDenom=1;
  int skew=0;
  String dmozFile=argv[0];
  boolean includeAdult=false;
  Pattern topicPattern=null;
  Vector<String> topics=new Vector<String>();
  Configuration conf=NutchConfiguration.create();
  FileSystem fs=FileSystem.get(conf);
  try {
    for (int i=1; i < argv.length; i++) {
      if ("-includeAdultMaterial".equals(argv[i])) {
        includeAdult=true;
      }
 else       if ("-subset".equals(argv[i])) {
        subsetDenom=Integer.parseInt(argv[i + 1]);
        i++;
      }
 else       if ("-topic".equals(argv[i])) {
        topics.addElement(argv[i + 1]);
        i++;
      }
 else       if ("-topicFile".equals(argv[i])) {
        addTopicsFromFile(argv[i + 1],topics);
        i++;
      }
 else       if ("-skew".equals(argv[i])) {
        skew=Integer.parseInt(argv[i + 1]);
        i++;
      }
    }
    DmozParser parser=new DmozParser();
    if (!topics.isEmpty()) {
      String regExp=new String("^(");
      int j=0;
      for (; j < topics.size() - 1; ++j) {
        regExp=regExp.concat(topics.get(j));
        regExp=regExp.concat("|");
      }
      regExp=regExp.concat(topics.get(j));
      regExp=regExp.concat(").*");
      LOG.info("Topic selection pattern = " + regExp);
      topicPattern=Pattern.compile(regExp);
    }
    parser.parseDmozFile(new File(dmozFile),subsetDenom,includeAdult,skew,topicPattern);
  }
  finally {
    fs.close();
  }
}
