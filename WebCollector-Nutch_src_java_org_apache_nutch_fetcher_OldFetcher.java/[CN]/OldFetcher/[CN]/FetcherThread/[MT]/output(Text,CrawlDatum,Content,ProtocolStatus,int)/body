{
  datum.setStatus(status);
  datum.setFetchTime(System.currentTimeMillis());
  if (pstatus != null)   datum.getMetaData().put(Nutch.WRITABLE_PROTO_STATUS_KEY,pstatus);
  ParseResult parseResult=null;
  if (content != null) {
    Metadata metadata=content.getMetadata();
    metadata.set(Nutch.SEGMENT_NAME_KEY,segmentName);
    try {
      scfilters.passScoreBeforeParsing(key,datum,content);
    }
 catch (    Exception e) {
      if (LOG.isWarnEnabled()) {
        LOG.warn("Couldn't pass score, url " + key + " ("+ e+ ")");
      }
    }
    if (parsing && status == CrawlDatum.STATUS_FETCH_SUCCESS) {
      try {
        parseResult=this.parseUtil.parse(content);
      }
 catch (      Exception e) {
        LOG.warn("Error parsing: " + key + ": "+ StringUtils.stringifyException(e));
      }
      if (parseResult == null) {
        byte[] signature=SignatureFactory.getSignature(getConf()).calculate(content,new ParseStatus().getEmptyParse(conf));
        datum.setSignature(signature);
      }
    }
    content.getMetadata().add(Nutch.FETCH_STATUS_KEY,Integer.toString(status));
  }
  try {
    output.collect(key,new NutchWritable(datum));
    if (content != null && storingContent)     output.collect(key,new NutchWritable(content));
    if (parseResult != null) {
      for (      Entry<Text,Parse> entry : parseResult) {
        Text url=entry.getKey();
        Parse parse=entry.getValue();
        ParseStatus parseStatus=parse.getData().getStatus();
        if (!parseStatus.isSuccess()) {
          LOG.warn("Error parsing: " + key + ": "+ parseStatus);
          parse=parseStatus.getEmptyParse(getConf());
        }
        byte[] signature=SignatureFactory.getSignature(getConf()).calculate(content,parse);
        parse.getData().getContentMeta().set(Nutch.SEGMENT_NAME_KEY,segmentName);
        parse.getData().getContentMeta().set(Nutch.SIGNATURE_KEY,StringUtil.toHexString(signature));
        parse.getData().getContentMeta().set(Nutch.FETCH_TIME_KEY,Long.toString(datum.getFetchTime()));
        if (url.equals(key))         datum.setSignature(signature);
        try {
          scfilters.passScoreAfterParsing(url,content,parse);
        }
 catch (        Exception e) {
          if (LOG.isWarnEnabled()) {
            LOG.warn("Couldn't pass score, url " + key + " ("+ e+ ")");
          }
        }
        output.collect(url,new NutchWritable(new ParseImpl(new ParseText(parse.getText()),parse.getData(),parse.isCanonical())));
      }
    }
  }
 catch (  IOException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error("fetcher caught:" + e.toString());
    }
  }
  if (parseResult != null && !parseResult.isEmpty()) {
    Parse p=parseResult.get(content.getUrl());
    if (p != null) {
      return p.getData().getStatus();
    }
  }
  return null;
}
