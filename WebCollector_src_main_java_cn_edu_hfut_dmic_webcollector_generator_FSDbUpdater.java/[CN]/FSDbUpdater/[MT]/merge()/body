{
  if (segmentName == null) {
    segmentName=getLastSegmentName();
  }
  if (segmentName == null) {
    return;
  }
  try {
    backup();
  }
 catch (  IOException ex) {
    LogUtils.getLogger().info("Exception",ex);
  }
  LogUtils.getLogger().info("merge " + getSegmentPath());
  mergeCount=0;
  File file_fetch=new File(getSegmentPath(),"fetch/info.avro");
  if (!file_fetch.exists()) {
    return;
  }
  File file_old=new File(crawlPath,Config.current_info_path);
  DbReader<CrawlDatum> reader_old=new DbReader<CrawlDatum>(CrawlDatum.class,file_old);
  DbReader<CrawlDatum> reader_fetch=new DbReader<CrawlDatum>(CrawlDatum.class,file_fetch);
  File file_current=new File(crawlPath,Config.current_info_path);
  if (!file_current.getParentFile().exists()) {
    file_current.getParentFile().mkdirs();
  }
  DbWriter<CrawlDatum> writer=new DbWriter<CrawlDatum>(CrawlDatum.class,file_current);
  BloomFilter bloomFilter=new BloomFilter();
  CrawlDatum datum=null;
  while (reader_fetch.hasNext()) {
    datum=reader_fetch.readNext();
    bloomFilter.add(datum.getUrl());
    writer.write(datum);
    reportMergeCount();
  }
  reader_fetch.close();
  while (reader_old.hasNext()) {
    datum=reader_old.readNext();
    if (bloomFilter.contains(datum.getUrl())) {
      continue;
    }
    bloomFilter.add(datum.getUrl());
    writer.write(datum);
    reportMergeCount();
  }
  reader_old.close();
  File file_parse=new File(getSegmentPath(),"parse_data/info.avro");
  if (file_parse.exists()) {
    DbReader<ParseData> reader_parse=new DbReader<ParseData>(ParseData.class,file_parse);
    ParseData parseresult=null;
    while (reader_parse.hasNext()) {
      parseresult=reader_parse.readNext();
      for (      Link link : parseresult.getLinks()) {
        if (bloomFilter.contains(link.getUrl())) {
          continue;
        }
        datum=new CrawlDatum();
        datum.setUrl(link.getUrl());
        datum.setStatus(CrawlDatum.STATUS_DB_UNFETCHED);
        bloomFilter.add(datum.getUrl());
        writer.write(datum);
        reportMergeCount();
      }
    }
    reader_parse.close();
  }
  writer.close();
}
