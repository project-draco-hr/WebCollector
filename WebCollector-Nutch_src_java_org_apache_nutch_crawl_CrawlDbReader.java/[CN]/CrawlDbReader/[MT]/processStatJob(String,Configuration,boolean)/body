{
  if (LOG.isInfoEnabled()) {
    LOG.info("CrawlDb statistics start: " + crawlDb);
  }
  Path tmpFolder=new Path(crawlDb,"stat_tmp" + System.currentTimeMillis());
  JobConf job=new NutchJob(config);
  job.setJobName("stats " + crawlDb);
  job.setBoolean("db.reader.stats.sort",sort);
  FileInputFormat.addInputPath(job,new Path(crawlDb,CrawlDb.CURRENT_NAME));
  job.setInputFormat(SequenceFileInputFormat.class);
  job.setMapperClass(CrawlDbStatMapper.class);
  job.setCombinerClass(CrawlDbStatCombiner.class);
  job.setReducerClass(CrawlDbStatReducer.class);
  FileOutputFormat.setOutputPath(job,tmpFolder);
  job.setOutputFormat(SequenceFileOutputFormat.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(LongWritable.class);
  job.setBoolean("mapreduce.fileoutputcommitter.marksuccessfuljobs",false);
  JobClient.runJob(job);
  FileSystem fileSystem=FileSystem.get(config);
  SequenceFile.Reader[] readers=SequenceFileOutputFormat.getReaders(config,tmpFolder);
  Text key=new Text();
  LongWritable value=new LongWritable();
  TreeMap<String,LongWritable> stats=new TreeMap<String,LongWritable>();
  for (int i=0; i < readers.length; i++) {
    SequenceFile.Reader reader=readers[i];
    while (reader.next(key,value)) {
      String k=key.toString();
      LongWritable val=stats.get(k);
      if (val == null) {
        val=new LongWritable();
        if (k.equals("scx"))         val.set(Long.MIN_VALUE);
        if (k.equals("scn"))         val.set(Long.MAX_VALUE);
        stats.put(k,val);
      }
      if (k.equals("scx")) {
        if (val.get() < value.get())         val.set(value.get());
      }
 else       if (k.equals("scn")) {
        if (val.get() > value.get())         val.set(value.get());
      }
 else {
        val.set(val.get() + value.get());
      }
    }
    reader.close();
  }
  if (LOG.isInfoEnabled()) {
    LOG.info("Statistics for CrawlDb: " + crawlDb);
    LongWritable totalCnt=stats.get("T");
    stats.remove("T");
    LOG.info("TOTAL urls:\t" + totalCnt.get());
    for (    Map.Entry<String,LongWritable> entry : stats.entrySet()) {
      String k=entry.getKey();
      LongWritable val=entry.getValue();
      if (k.equals("scn")) {
        LOG.info("min score:\t" + (val.get() / 1000.0f));
      }
 else       if (k.equals("scx")) {
        LOG.info("max score:\t" + (val.get() / 1000.0f));
      }
 else       if (k.equals("sct")) {
        LOG.info("avg score:\t" + (float)((((double)val.get()) / totalCnt.get()) / 1000.0));
      }
 else       if (k.startsWith("status")) {
        String[] st=k.split(" ");
        int code=Integer.parseInt(st[1]);
        if (st.length > 2)         LOG.info("   " + st[2] + " :\t"+ val);
 else         LOG.info(st[0] + " " + code+ " ("+ CrawlDatum.getStatusName((byte)code)+ "):\t"+ val);
      }
 else       LOG.info(k + ":\t" + val);
    }
  }
  fileSystem.delete(tmpFolder,true);
  if (LOG.isInfoEnabled()) {
    LOG.info("CrawlDb statistics: done");
  }
}
