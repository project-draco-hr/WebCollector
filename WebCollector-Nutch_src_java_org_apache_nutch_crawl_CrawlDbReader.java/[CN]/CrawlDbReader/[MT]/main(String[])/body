{
  CrawlDbReader dbr=new CrawlDbReader();
  if (args.length < 2) {
    System.err.println("Usage: CrawlDbReader <crawldb> (-stats | -dump <out_dir> | -topN <nnnn> <out_dir> [<min>] | -url <url>)");
    System.err.println("\t<crawldb>\tdirectory name where crawldb is located");
    System.err.println("\t-stats [-sort] \tprint overall statistics to System.out");
    System.err.println("\t\t[-sort]\tlist status sorted by host");
    System.err.println("\t-dump <out_dir> [-format normal|csv|crawldb]\tdump the whole db to a text file in <out_dir>");
    System.err.println("\t\t[-format csv]\tdump in Csv format");
    System.err.println("\t\t[-format normal]\tdump in standard format (default option)");
    System.err.println("\t\t[-format crawldb]\tdump as CrawlDB");
    System.err.println("\t\t[-regex <expr>]\tfilter records with expression");
    System.err.println("\t\t[-retry <num>]\tminimum retry count");
    System.err.println("\t\t[-status <status>]\tfilter records by CrawlDatum status");
    System.err.println("\t-url <url>\tprint information on <url> to System.out");
    System.err.println("\t-topN <nnnn> <out_dir> [<min>]\tdump top <nnnn> urls sorted by score to <out_dir>");
    System.err.println("\t\t[<min>]\tskip records with scores below this value.");
    System.err.println("\t\t\tThis can significantly improve performance.");
    return;
  }
  String param=null;
  String crawlDb=args[0];
  Configuration conf=NutchConfiguration.create();
  for (int i=1; i < args.length; i++) {
    if (args[i].equals("-stats")) {
      boolean toSort=false;
      if (i < args.length - 1 && "-sort".equals(args[i + 1])) {
        toSort=true;
        i++;
      }
      dbr.processStatJob(crawlDb,conf,toSort);
    }
 else     if (args[i].equals("-dump")) {
      param=args[++i];
      String format="normal";
      String regex=null;
      Integer retry=null;
      String status=null;
      for (int j=i + 1; j < args.length; j++) {
        if (args[j].equals("-format")) {
          format=args[++j];
          i=i + 2;
        }
        if (args[j].equals("-regex")) {
          regex=args[++j];
          i=i + 2;
        }
        if (args[j].equals("-retry")) {
          retry=Integer.parseInt(args[++j]);
          i=i + 2;
        }
        if (args[j].equals("-status")) {
          status=args[++j];
          i=i + 2;
        }
      }
      dbr.processDumpJob(crawlDb,param,conf,format,regex,status,retry);
    }
 else     if (args[i].equals("-url")) {
      param=args[++i];
      dbr.readUrl(crawlDb,param,conf);
    }
 else     if (args[i].equals("-topN")) {
      param=args[++i];
      long topN=Long.parseLong(param);
      param=args[++i];
      float min=0.0f;
      if (i < args.length - 1) {
        min=Float.parseFloat(args[++i]);
      }
      dbr.processTopNJob(crawlDb,topN,min,param,conf);
    }
 else {
      System.err.println("\nError: wrong argument " + args[i]);
    }
  }
  return;
}
