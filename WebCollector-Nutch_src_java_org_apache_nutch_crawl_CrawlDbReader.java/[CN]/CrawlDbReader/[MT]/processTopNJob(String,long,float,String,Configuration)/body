{
  if (LOG.isInfoEnabled()) {
    LOG.info("CrawlDb topN: starting (topN=" + topN + ", min="+ min+ ")");
    LOG.info("CrawlDb db: " + crawlDb);
  }
  Path outFolder=new Path(output);
  Path tempDir=new Path(config.get("mapred.temp.dir",".") + "/readdb-topN-temp-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));
  JobConf job=new NutchJob(config);
  job.setJobName("topN prepare " + crawlDb);
  FileInputFormat.addInputPath(job,new Path(crawlDb,CrawlDb.CURRENT_NAME));
  job.setInputFormat(SequenceFileInputFormat.class);
  job.setMapperClass(CrawlDbTopNMapper.class);
  job.setReducerClass(IdentityReducer.class);
  FileOutputFormat.setOutputPath(job,tempDir);
  job.setOutputFormat(SequenceFileOutputFormat.class);
  job.setOutputKeyClass(FloatWritable.class);
  job.setOutputValueClass(Text.class);
  job.setLong("db.reader.topn.min",Math.round(1000000.0 * min));
  JobClient.runJob(job);
  if (LOG.isInfoEnabled()) {
    LOG.info("CrawlDb topN: collecting topN scores.");
  }
  job=new NutchJob(config);
  job.setJobName("topN collect " + crawlDb);
  job.setLong("db.reader.topn",topN);
  FileInputFormat.addInputPath(job,tempDir);
  job.setInputFormat(SequenceFileInputFormat.class);
  job.setMapperClass(IdentityMapper.class);
  job.setReducerClass(CrawlDbTopNReducer.class);
  FileOutputFormat.setOutputPath(job,outFolder);
  job.setOutputFormat(TextOutputFormat.class);
  job.setOutputKeyClass(FloatWritable.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(1);
  JobClient.runJob(job);
  FileSystem fs=FileSystem.get(config);
  fs.delete(tempDir,true);
  if (LOG.isInfoEnabled()) {
    LOG.info("CrawlDb topN: done");
  }
}
