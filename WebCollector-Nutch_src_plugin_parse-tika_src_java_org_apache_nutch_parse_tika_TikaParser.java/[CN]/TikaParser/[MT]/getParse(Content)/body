{
  String mimeType=content.getContentType();
  URL base;
  try {
    base=new URL(content.getBaseUrl());
  }
 catch (  MalformedURLException e) {
    return new ParseStatus(e).getEmptyParseResult(content.getUrl(),getConf());
  }
  Parser parser=tikaConfig.getParser(MediaType.parse(mimeType));
  byte[] raw=content.getContent();
  if (parser == null) {
    String message="Can't retrieve Tika parser for mime-type " + mimeType;
    LOG.error(message);
    return new ParseStatus(ParseStatus.FAILED,message).getEmptyParseResult(content.getUrl(),getConf());
  }
  LOG.debug("Using Tika parser " + parser.getClass().getName() + " for mime-type "+ mimeType);
  Metadata tikamd=new Metadata();
  HTMLDocumentImpl doc=new HTMLDocumentImpl();
  doc.setErrorChecking(false);
  DocumentFragment root=doc.createDocumentFragment();
  DOMBuilder domhandler=new DOMBuilder(doc,root);
  ParseContext context=new ParseContext();
  tikamd.set(Metadata.CONTENT_TYPE,mimeType);
  try {
    parser.parse(new ByteArrayInputStream(raw),domhandler,tikamd,context);
  }
 catch (  Exception e) {
    LOG.error("Error parsing " + content.getUrl(),e);
    return new ParseStatus(ParseStatus.FAILED,e.getMessage()).getEmptyParseResult(content.getUrl(),getConf());
  }
  HTMLMetaTags metaTags=new HTMLMetaTags();
  String text="";
  String title="";
  Outlink[] outlinks=new Outlink[0];
  org.apache.nutch.metadata.Metadata nutchMetadata=new org.apache.nutch.metadata.Metadata();
  HTMLMetaProcessor.getMetaTags(metaTags,root,base);
  if (LOG.isTraceEnabled()) {
    LOG.trace("Meta tags for " + base + ": "+ metaTags.toString());
  }
  if (!metaTags.getNoIndex()) {
    StringBuffer sb=new StringBuffer();
    if (LOG.isTraceEnabled()) {
      LOG.trace("Getting text...");
    }
    utils.getText(sb,root);
    text=sb.toString();
    sb.setLength(0);
    if (LOG.isTraceEnabled()) {
      LOG.trace("Getting title...");
    }
    utils.getTitle(sb,root);
    title=sb.toString().trim();
  }
  if (!metaTags.getNoFollow()) {
    ArrayList<Outlink> l=new ArrayList<Outlink>();
    URL baseTag=utils.getBase(root);
    if (LOG.isTraceEnabled()) {
      LOG.trace("Getting links...");
    }
    utils.getOutlinks(baseTag != null ? baseTag : base,l,root);
    outlinks=l.toArray(new Outlink[l.size()]);
    if (LOG.isTraceEnabled()) {
      LOG.trace("found " + outlinks.length + " outlinks in "+ content.getUrl());
    }
  }
  String[] TikaMDNames=tikamd.names();
  for (  String tikaMDName : TikaMDNames) {
    if (tikaMDName.equalsIgnoreCase(Metadata.TITLE))     continue;
    nutchMetadata.add(tikaMDName,tikamd.get(tikaMDName));
  }
  if (outlinks.length == 0) {
    outlinks=OutlinkExtractor.getOutlinks(text,getConf());
  }
  ParseStatus status=new ParseStatus(ParseStatus.SUCCESS);
  if (metaTags.getRefresh()) {
    status.setMinorCode(ParseStatus.SUCCESS_REDIRECT);
    status.setArgs(new String[]{metaTags.getRefreshHref().toString(),Integer.toString(metaTags.getRefreshTime())});
  }
  ParseData parseData=new ParseData(status,title,outlinks,content.getMetadata(),nutchMetadata);
  ParseResult parseResult=ParseResult.createParseResult(content.getUrl(),new ParseImpl(text,parseData));
  ParseResult filteredParse=this.htmlParseFilters.filter(content,parseResult,metaTags,root);
  if (metaTags.getNoCache()) {
    for (    Map.Entry<org.apache.hadoop.io.Text,Parse> entry : filteredParse)     entry.getValue().getData().getParseMeta().set(Nutch.CACHING_FORBIDDEN_KEY,cachingPolicy);
  }
  return filteredParse;
}
