{
  String queueID;
  URL u=null;
  try {
    u=new URL(url.toString());
  }
 catch (  Exception e) {
    LOG.warn("Cannot parse url: " + url,e);
    return null;
  }
  final String proto=u.getProtocol().toLowerCase();
  String key;
  if (FetchItemQueues.QUEUE_MODE_IP.equalsIgnoreCase(queueMode)) {
    try {
      final InetAddress addr=InetAddress.getByName(u.getHost());
      key=addr.getHostAddress();
    }
 catch (    final UnknownHostException e) {
      LOG.warn("Unable to resolve: " + u.getHost() + ", skipping.");
      return null;
    }
  }
 else   if (FetchItemQueues.QUEUE_MODE_DOMAIN.equalsIgnoreCase(queueMode)) {
    key=URLUtil.getDomainName(u);
    if (key == null) {
      LOG.warn("Unknown domain for url: " + url + ", using URL string as key");
      key=u.toExternalForm();
    }
  }
 else {
    key=u.getHost();
    if (key == null) {
      LOG.warn("Unknown host for url: " + url + ", using URL string as key");
      key=u.toExternalForm();
    }
  }
  queueID=proto + "://" + key.toLowerCase();
  return new FetchItem(url,u,datum,queueID,outlinkDepth);
}
